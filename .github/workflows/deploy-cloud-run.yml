name: deploy-cloud-run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    name: Build & Deploy (Cloud Run)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # required for Workload Identity Federation
    outputs:
      service_url: ${{ steps.fetch-url.outputs.service_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: gcloud info
        run: |
          gcloud --version
          gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"
          gcloud services list --enabled || true

      - name: Build container (Cloud Build → Artifact Registry/GCR)
        run: |
          gcloud builds submit \
            --project "${{ secrets.GCP_PROJECT_ID }}" \
            --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run (latest)
        run: |
          gcloud run deploy "${{ secrets.GCP_SERVICE }}" \
            --project "${{ secrets.GCP_PROJECT_ID }}" \
            --region "${{ secrets.GCP_REGION }}" \
            --image "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE }}:${{ github.sha }}" \
            --platform managed \
            --allow-unauthenticated \
            --memory=1Gi --cpu=1 \
            --min-instances=0 --max-instances=3 \
            --timeout=300 \
            --quiet

      - name: Fetch service URL
        id: fetch-url
        run: |
          URL=$(gcloud run services describe "${{ secrets.GCP_SERVICE }}" \
              --project "${{ secrets.GCP_PROJECT_ID }}" \
              --region "${{ secrets.GCP_REGION }}" \
              --format='value(status.url)')
          echo "service_url=$URL" >> "$GITHUB_OUTPUT"
          echo "Service URL: $URL"

  smoke-test:
    name: Smoke Test (prod, with retry)
    runs-on: ubuntu-latest
    needs: build-deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure jq is present for the Makefile smoke target
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Print target URL
        run: echo "BASE = ${{ needs.build-deploy.outputs.service_url }}"

      - name: Smoke (retry with backoff)
        env:
          BASE: ${{ needs.build-deploy.outputs.service_url }}
        run: |
          set -Eeuo pipefail

          if [ -z "${BASE:-}" ]; then
            echo "ERROR: BASE is empty (no service URL from deploy job)"; exit 1
          fi

          # Backoff schedule (in seconds)
          attempts=(5 10 20 30 45)
          pass=0

          for wait in "${attempts[@]}"; do
            echo ">> Attempt (wait=$wait) hitting $BASE ..."
            if make smoke-prod BASE="$BASE"; then
              pass=1
              break
            else
              echo "!! Smoke failed; sleeping ${wait}s and retrying …"
              sleep "$wait"
            fi
          done

          # One last attempt after the loop (covers success on final try)
          if [ "$pass" -eq 0 ]; then
            echo ">> Final attempt …"
            make smoke-prod BASE="$BASE"
          fi

          echo "✅ Smoke test passed for $BASE"