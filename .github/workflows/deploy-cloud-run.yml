name: deploy-cloud-run

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # required for WIF

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to Google Cloud via Workload Identity Federation
      - name: Auth (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: gcloud info
        run: |
          gcloud --version
          gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"
          gcloud services list --enabled || true

      # Build container with Cloud Build (source is the repo root)
      - name: Build (Cloud Build)
        run: |
          gcloud builds submit \
            --project "${{ secrets.GCP_PROJECT_ID }}" \
            --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE }}:${{ github.sha }}"

      # Deploy to Cloud Run (LATEST, no canary)
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "${{ secrets.GCP_SERVICE }}" \
            --project "${{ secrets.GCP_PROJECT_ID }}" \
            --region "${{ secrets.GCP_REGION }}" \
            --image "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE }}:${{ github.sha }}" \
            --platform managed \
            --allow-unauthenticated \
            --memory=1Gi --cpu=1 \
            --min-instances=0 --max-instances=3 \
            --timeout=300 \
            --quiet

      # Discover the service URL to hit
      - name: Fetch URL
        id: url
        run: |
          URL=$(gcloud run services describe "${{ secrets.GCP_SERVICE }}" \
              --project "${{ secrets.GCP_PROJECT_ID }}" \
              --region "${{ secrets.GCP_REGION }}" \
              --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      # Smoke tests
      - name: "Smoke: /health and /ready"
        run: |
          set -euo pipefail
          URL="${{ steps.url.outputs.url }}"
          echo "Hitting $URL ..."
          curl -fsS "$URL/health" | jq . || (echo "health failed" && exit 1)
          curl -fsS "$URL/ready"  | jq . || (echo "ready failed" && exit 1)
