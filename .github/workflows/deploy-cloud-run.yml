name: deploy-cloud-run

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write   # for WIF

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION:     ${{ secrets.GCP_REGION }}
      GCP_SERVICE:    ${{ secrets.GCP_SERVICE }}     # e.g., run-density
      GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }} # full provider name
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }} # SA email

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Enable required APIs
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com \
            --project "${GCP_PROJECT_ID}"

      - name: Build container with Cloud Build
        run: |
          set -euo pipefail
          gcloud builds submit \
            --project "${GCP_PROJECT_ID}" \
            --tag "gcr.io/${GCP_PROJECT_ID}/${GCP_SERVICE}:${{ github.sha }}"

      - name: Deploy to Cloud Run (canary)
        id: deploy
        run: |
          set -euo pipefail
          gcloud run deploy "${GCP_SERVICE}" \
            --project "${GCP_PROJECT_ID}" \
            --region "${GCP_REGION}" \
            --image "gcr.io/${GCP_PROJECT_ID}/${GCP_SERVICE}:${{ github.sha }}" \
            --allow-unauthenticated \
            --tag canary \
            --no-traffic \
            --memory=1Gi --cpu=1 --timeout=300

          # capture service URL for canary tag
          URL="$(gcloud run services describe "${GCP_SERVICE}" \
            --project "${GCP_PROJECT_ID}" --region "${GCP_REGION}" \
            --format='value(status.url)')"

          # Turn the base URL into the tag URL: https://canary---SERVICE-<hash>-<region>.a.run.app
          # gcloud provides it directly via 'list-urls' in newer versions; fallback here:
          CANARY_URL="$(gcloud run services list-urls --platform=managed \
            --project "${GCP_PROJECT_ID}" --region "${GCP_REGION}" \
            --service "${GCP_SERVICE}" 2>/dev/null | awk '/canary/ {print $1}')"

          if [[ -z "${CANARY_URL}" ]]; then
            # fallback: query revisions and fetch tag URL
            CANARY_URL="$(gcloud run revisions list --service="${GCP_SERVICE}" \
              --project "${GCP_PROJECT_ID}" --region "${GCP_REGION}" \
              --format='table(NAME,TAGS,URL)' | awk '/canary/ {print $3; exit}')"
          fi

          echo "canary_url=${CANARY_URL}" >> "$GITHUB_OUTPUT"

          # Write JSON summary expected by artifact step
          printf '{ "url": "%s" }\n' "${CANARY_URL}" > canary_service.json
          cat canary_service.json

      - name: Smoke test canary
        id: smoke
        run: |
          set -euo pipefail
          BASE="${{ steps.deploy.outputs.canary_url }}"
          echo "BASE=${BASE}"

          # health / ready
          curl -fsSL "${BASE}/health" -H 'Accept: application/json' | tee health.json
          curl -fsSL "${BASE}/ready"  -H 'Accept: application/json' | tee ready.json

          # minimal density ping (very small payload)
          curl -fsSL -X POST "${BASE}/api/density" \
            -H "Content-Type: application/json" -H "Accept: application/json" \
            -d '{"paceCsv":"https://raw.githubusercontent.com/thomjeff/run-congestion/main/data/your_pace_data.csv","startTimes":{"10K":440,"Half":460},"segments":["10K,Half,0.00,0.03,3.0,uni"],"stepKm":0.03,"timeWindow":60}' \
            | jq '.engine' | tee density_engine.txt

          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Upload canary artifacts (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-diagnostics
          path: |
            canary_service.json
            health.json
            ready.json
            density_engine.txt
          if-no-files-found: ignore

      - name: Shift traffic to latest if smoke passed
        if: steps.smoke.outputs.ok == 'true'
        run: |
          gcloud run services update-traffic "${GCP_SERVICE}" \
            --project "${GCP_PROJECT_ID}" --region "${GCP_REGION}" \
            --to-latest
