name: deploy-cloud-run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write              # required for WIF
    outputs:
      service_url: ${{ steps.discover.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:          ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker "${{ secrets.GCP_REGION }}-docker.pkg.dev" -q

      - name: Build & Push image (Docker â†’ Artifact Registry)
        id: build
        run: |
          IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/run/${{ secrets.GCP_SERVICE }}:${{ github.sha }}"
          echo "Building $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Deploy to Cloud Run
        run: |
          IMAGE="${{ steps.build.outputs.image }}"
          gcloud run deploy "${{ secrets.GCP_SERVICE }}" \
            --project "${{ secrets.GCP_PROJECT_ID }}" \
            --region  "${{ secrets.GCP_REGION }}" \
            --image   "$IMAGE" \
            --platform managed \
            --allow-unauthenticated \
            --memory=1Gi --cpu=1 \
            --min-instances=0 --max-instances=3 \
            --timeout=300 --quiet

      - name: Discover service URL
        id: discover
        run: |
          URL=$(gcloud run services describe "${{ secrets.GCP_SERVICE }}" \
                --project "${{ secrets.GCP_PROJECT_ID }}" \
                --region  "${{ secrets.GCP_REGION }}" \
                --format='value(status.url)')
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Service URL: $URL"

  contract-tests:
    name: Contract Tests (live)
    runs-on: ubuntu-latest
    needs: build-deploy
    env:
      BASE_URL: ${{ needs.build-deploy.outputs.service_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests jsonschema==4.22.0

      - name: Run pytest contracts
        run: |
          echo "Testing against ${BASE_URL}"
          if [ -z "${BASE_URL}" ]; then
            echo "ERROR: BASE_URL is empty" >&2
            exit 1
          fi
          pytest -q tests/test_contract.py