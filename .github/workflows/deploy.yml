name: Deploy Frontend Artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_pages:
        description: "Deploy to GitHub Pages"
        default: "false"
        required: false

jobs:
  build-and-bundle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      # Install only what we need to build front-end
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements-core.txt
          pip install -r requirements-frontend.txt
          pip install -r requirements-dev.txt
      
      # NOTE: This workflow expects data/*.json and reports/density.md to exist
      # For Phase 5 initial implementation, we use the existing sample data
      # Future: Integrate with analytics pipeline to generate real outputs
      
      # Phase 1: Validate data + provenance
      - name: Validate data contracts
        run: RUNFLOW_ENV=cloud python frontend/validation/scripts/validate_data.py
      
      # Phase 1.5: E2E parity check
      - name: E2E parity validation
        run: python frontend/e2e/e2e_validate.py
      
      # Phase 2: Build map
      - name: Build interactive map
        run: python frontend/map/scripts/generate_map.py
      
      # Phase 3: Build dashboard
      - name: Build dashboard
        run: python frontend/dashboard/scripts/generate_dashboard.py
      
      # Phase 4: Build report
      - name: Build density report
        run: python frontend/reports/scripts/build_density_report.py
      
      # Phase 4.5: Generate UI artifacts (JSON files for APIs)
      - name: Generate UI artifacts
        run: |
          # Get the latest run_id from latest.json
          RUN_ID=$(python -c "import json; print(json.load(open('artifacts/latest.json'))['run_id'])")
          echo "Using run_id: $RUN_ID"
          python analytics/export_frontend_artifacts.py $RUN_ID
      
      # Phase 5: Bundle release
      - name: Create release bundle
        run: python frontend/release/build_bundle.py
      
      # Upload artifacts for review
      - name: Upload release bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runflow-release
          path: |
            release/*.zip
            release/manifest.json
            frontend/validation/output/validation_report.json
      
      - name: Upload HTML artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runflow-html-artifacts
          path: |
            frontend/map/output/map.html
            frontend/dashboard/output/dashboard.html
            frontend/reports/output/density.html
            frontend/reports/output/mini_maps/
            frontend/reports/output/sparklines/
      
      - name: Upload UI artifacts (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runflow-ui-artifacts
          path: |
            artifacts/*/ui/
      
      # Upload JSON artifacts to Cloud Storage for API access
      - name: Auth (WIF)
        if: always()
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Setup gcloud
        if: always()
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Upload artifacts to Cloud Storage
        if: always()
        run: |
          # Find the latest artifacts directory
          LATEST_ARTIFACTS=$(ls -t artifacts/ | head -1)
          echo "Uploading artifacts from: artifacts/$LATEST_ARTIFACTS/ui/"
          
          # Upload to Cloud Storage
          gsutil -m cp -r "artifacts/$LATEST_ARTIFACTS/ui/*" gs://run-density-reports/artifacts/$LATEST_ARTIFACTS/ui/
          
          echo "âœ… Uploaded UI artifacts to Cloud Storage"
      
      # GitHub Pages deployment (optional, controlled by workflow_dispatch)
      # Uncomment when ready to enable Pages:
      # - name: Setup Pages
      #   if: github.event.inputs.deploy_to_pages == 'true'
      #   uses: actions/configure-pages@v5
      # 
      # - name: Upload artifact to Pages
      #   if: github.event.inputs.deploy_to_pages == 'true'
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: |
      #       frontend/map/output/
      #       frontend/dashboard/output/
      #       frontend/reports/output/
      # 
      # - name: Deploy to Pages
      #   if: github.event.inputs.deploy_to_pages == 'true'
      #   id: deployment
      #   uses: actions/deploy-pages@v4

