name: Deploy and Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-deploy:
    name: Build & Deploy (Docker → Artifact Registry → Cloud Run)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # WIF required

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:         ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: "Resolve parameters & configure Docker"
        id: params
        env:
          REGION:     ${{ secrets.GCP_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SERVICE:    ${{ secrets.GCP_SERVICE }}
          REPO_SEC:   ${{ secrets.GCP_AR_REPO }}   # may be empty
        run: |
          set -euo pipefail
          REPO="${REPO_SEC:-run}"   # default to 'run' if secret is empty
          echo "REGION=${REGION}"       | tee -a "$GITHUB_OUTPUT"
          echo "PROJECT_ID=${PROJECT_ID}" | tee -a "$GITHUB_OUTPUT"
          echo "SERVICE=${SERVICE}"     | tee -a "$GITHUB_OUTPUT"
          echo "REPO=${REPO}"           | tee -a "$GITHUB_OUTPUT"
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: "Build & Push image (Docker → Artifact Registry)"
        env:
          REGION:     ${{ steps.params.outputs.REGION }}
          PROJECT_ID: ${{ steps.params.outputs.PROJECT_ID }}
          SERVICE:    ${{ steps.params.outputs.SERVICE }}
          REPO:       ${{ steps.params.outputs.REPO }}
          SHA:        ${{ github.sha }}
        run: |
          set -euo pipefail
          DOMAIN="${REGION}-docker.pkg.dev"
          IMAGE="${DOMAIN}/${PROJECT_ID}/${REPO}/${SERVICE}:${SHA}"
          echo "Building IMAGE=${IMAGE}"
          docker build -t "${IMAGE}" .
          docker push "${IMAGE}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

      - name: "Deploy to Cloud Run (latest)"
        env:
          REGION:     ${{ steps.params.outputs.REGION }}
          PROJECT_ID: ${{ steps.params.outputs.PROJECT_ID }}
          SERVICE:    ${{ steps.params.outputs.SERVICE }}
          REPO:       ${{ steps.params.outputs.REPO }}
          SHA:        ${{ github.sha }}
        run: |
          set -euo pipefail
          DOMAIN="${REGION}-docker.pkg.dev"
          IMAGE="${DOMAIN}/${PROJECT_ID}/${REPO}/${SERVICE}:${SHA}"
          echo "Deploying IMAGE=${IMAGE}"
          gcloud run deploy "${SERVICE}" \
            --project "${PROJECT_ID}" \
            --region "${REGION}" \
            --image  "${IMAGE}" \
            --platform managed \
            --allow-unauthenticated \
            --memory=1Gi --cpu=1 \
            --min-instances=0 --max-instances=3 \
            --timeout=300 --quiet

  smoke-test:
    name: Smoke Test (Production)
    runs-on: ubuntu-latest
    needs: build-deploy
    permissions:
      contents: read
      id-token: write   # we auth again to read the service URL

    steps:
      - name: Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account:         ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: "Resolve service URL"
        id: url
        env:
          REGION:     ${{ secrets.GCP_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SERVICE:    ${{ secrets.GCP_SERVICE }}
        run: |
          set -euo pipefail
          URL=$(gcloud run services describe "${SERVICE}" \
            --project "${PROJECT_ID}" \
            --region "${REGION}" \
            --format='value(status.url)')
          if [ -z "$URL" ]; then
            echo "ERROR: service URL is empty"; exit 1
          fi
          echo "BASE_URL=${URL}" >> "$GITHUB_OUTPUT"
          echo "Resolved service URL: ${URL}"

      - name: "Health and readiness check"
        env:
          BASE_URL: ${{ steps.url.outputs.BASE_URL }}
        run: |
          set -euo pipefail
          echo "Testing against ${BASE_URL}"
          
          # Basic liveness
          curl -fsS "${BASE_URL}/health" | jq -e '.ok == true' >/dev/null
          echo "✅ Health check passed"
          
          # Engine readiness (both loaders)
          curl -fsS "${BASE_URL}/ready"  | jq -e '.ok == true and .density_loaded and .overlap_loaded' >/dev/null
          echo "✅ Ready check passed"

      - name: "Density endpoint test (retry with backoff)"
        env:
          BASE_URL: ${{ steps.url.outputs.BASE_URL }}
        run: |
          set -euo pipefail
          echo "Testing density endpoint with local CSV files..."

          attempt() {
            echo "Attempt $1:"
            set -e
            
            # Test density endpoint with local CSV files (included in Docker build)
            response=$(curl -fsS -X POST "${BASE_URL}/api/density" \
              -H "Content-Type: application/json" -H "Accept: application/json" \
              -d '{
                    "paceCsv":"data/your_pace_data.csv",
                    "overlapsCsv":"data/overlaps_smoke.csv",
                    "startTimes":{"Full":420,"10K":440,"Half":460},
                    "stepKm":0.03,
                    "timeWindow":60
                  }')
            
            # Validate response
            echo "$response" | jq -e '.engine == "density" and (.segments|length) > 0' >/dev/null
            echo "✅ Density endpoint test passed"
          }

          # Retry logic with exponential backoff
          n=0
          until [ $n -ge 5 ]; do
            if attempt $((n+1)); then 
              echo "✅ All smoke tests passed for ${BASE_URL}"
              exit 0
            fi
            n=$((n+1))
            if [ $n -lt 5 ]; then
              echo "Retrying in 8s... (attempt $n/5)"
              sleep 8
            fi
          done
          
          echo "❌ Smoke tests failed after 5 attempts"
          exit 1
