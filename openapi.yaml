openapi: 3.0.3
info:
  title: Run Density API
  version: 1.0.0
  description: |
    Stable API surface for density and overlap computations (Cloud Run).
servers:
  - url: https://run-density-<PROJECT>.<REGION>.run.app
paths:
  /health:
    get:
      summary: Liveness probe
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  ts: { type: number }
  /ready:
    get:
      summary: Readiness probe
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  density_loaded: { type: boolean }
                  overlap_loaded: { type: boolean }
  /api/density:
    post:
      summary: Density-first segment metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [paceCsv, startTimes, segments, stepKm, timeWindow]
              properties:
                paceCsv: { type: string, format: uri }
                startTimes:
                  type: object
                  additionalProperties:
                    type: number
                segments:
                  type: array
                  items:
                    oneOf:
                      - type: string
                      - type: object
                        required: [eventA, from, to]
                        properties:
                          eventA: { type: string }
                          eventB: { type: string, nullable: true }
                          from: { type: number }
                          to:   { type: number }
                          width: { type: number, default: 3.0 }
                          direction: { type: string, enum: [uni, bi], default: uni }
                stepKm: { type: number }
                timeWindow: { type: number }
      responses:
        '200':
          description: Density results
          headers:
            X-Compute-Seconds:
              schema: { type: string }
              description: Elapsed compute time in seconds, formatted as 'X.XX'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DensityResponse'
  /api/overlap:
    post:
      summary: Per-step split counts for two events over a segment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [paceCsv, startTimes, eventA, from, to, stepKm, timeWindow]
              properties:
                paceCsv: { type: string, format: uri }
                startTimes:
                  type: object
                  additionalProperties:
                    type: number
                eventA: { type: string }
                eventB: { type: string, nullable: true }
                from: { type: number }
                to:   { type: number }
                stepKm: { type: number }
                timeWindow: { type: number }
      responses:
        '200':
          description: Overlap results
          headers:
            X-Compute-Seconds:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverlapResponse'
components:
  schemas:
    DensityStep:
      type: object
      properties:
        km: { type: number }
        areal_density: { type: number }
        zone: { type: string, enum: [green, amber, red, dark-red] }
        combined_runners: { type: integer }
      additionalProperties: true
    DensitySegment:
      type: object
      properties:
        segment:
          type: object
          properties:
            eventA: { type: string }
            eventB: { type: string, nullable: true }
            from: { type: number }
            to:   { type: number }
            width: { type: number }
            direction: { type: string }
        steps:
          type: array
          items: { $ref: '#/components/schemas/DensityStep' }
        peak:
          type: object
          properties:
            km: { type: number }
            A:  { type: integer }
            B:  { type: integer, nullable: true }
            combined: { type: integer }
            areal_density: { type: number }
            zone: { type: string }
        time_in_zones:
          type: object
          properties:
            green: { type: number }
            amber: { type: number }
            red: { type: number }
            dark-red: { type: number }
    DensityResponse:
      type: object
      properties:
        ok: { type: boolean }
        engine: { type: string, enum: [density] }
        segments:
          type: array
          items: { $ref: '#/components/schemas/DensitySegment' }
    OverlapStep:
      type: object
      properties:
        km: { type: number }
        combined_runners: { type: integer }
      additionalProperties: true
    OverlapResponse:
      type: object
      properties:
        ok: { type: boolean }
        engine: { type: string, enum: [overlap] }
        steps:
          type: array
          items: { $ref: '#/components/schemas/OverlapStep' }
        peak:
          type: object
          properties:
            km: { type: number }
            A:  { type: integer }
            B:  { type: integer, nullable: true }
            combined: { type: integer }
